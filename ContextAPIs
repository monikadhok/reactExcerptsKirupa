Context provides a way to pass data through the component tree without having 
to pass through props

In a typical React application, data is passed top-down (parent to child) via 
props, but this can be cumbersome for certain types of props (e.g. locale 
preference, UI theme) that are required by many components within an application. 
Context provides a way to share values like these between components without 
having to explicitly pass a prop through every level of the tree.

When to use context:
Context is designed to share data that can be considered “global” for a tree of 
React components, such as the current authenticated user, theme, or preferred 
language. For example, in the code below we manually thread through a “theme” 
prop in order to style the Button component:

class App extends React.Component {
  render() {
    return <Toolbar theme="dark" />;
  }
}

function Toolbar(props) {
  // The Toolbar component must take an extra "theme" prop
  // and pass it to the ThemedButton. This can become painful
  // if every single button in the app needs to know the theme
  // because it would have to be passed through all components.
  return (
    <div>
      <ThemedButton theme={props.theme} />
    </div>
  );
}

function ThemedButton(props) {
  return <Button theme={props.theme} />;
}
-------------------------------------------------------
Using Context we can avoid :

const ThemeContext = React.createContext('light');

class App extends React.Component {
  render() {
    // Use a Provider to pass the current theme to the tree below.
    // Any component can read it, no matter how deep it is.
    // In this example, we're passing "dark" as the current value.
    return (
      <ThemeContext.Provider value="dark">
        <Toolbar />
      </ThemeContext.Provider>
    );
  }
}

// A component in the middle doesn't have to
// pass the theme down explicitly anymore.
function Toolbar(props) {
  return (
    <div>
      <ThemedButton />
    </div>
  );
}

function ThemedButton(props) {
  // Use a Consumer to read the current theme context.
  // React will find the closest theme Provider above and use its value.
  // In this example, the current theme is "dark".
  return (
    <ThemeContext.Consumer>
      {theme => <Button {...props} theme={theme} />}
    </ThemeContext.Consumer>
  );
}
-----------------------------------------------------------

Higher order components
Not part of React API. Advanced technique in React for reusing component logic. 

Whereas a component transforms props into UI, a higher-order component 
transforms a component into another component.